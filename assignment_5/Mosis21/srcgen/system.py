"""Implementation of statechart system.
Generated by YAKINDU Statechart Tools code generator.
"""

import queue
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))
from yakindu.rx import Observer

class TrolleySetTargetSpeedObserver(Observer):
	"""Observer for trolley_set_target_speed.
	"""
	
	def __init__(self, statemachine):
		self.statemachine = statemachine

	def next(self, value=None):
		"""Raises the trolley_set_target_speed.
		"""
		self.statemachine.raise_trolley_set_target_speed(value)


class PhysicsUpdateObserver(Observer):
	"""Observer for physics_update.
	"""
	
	def __init__(self, statemachine):
		self.statemachine = statemachine

	def next(self, value=None):
		"""Raises the physics_update.
		"""
		self.statemachine.raise_physics_update()


class MotorControlSetAccelerationObserver(Observer):
	"""Observer for motor_control_set_acceleration.
	"""
	
	def __init__(self, statemachine):
		self.statemachine = statemachine

	def next(self, value=None):
		"""Raises the motor_control_set_acceleration.
		"""
		self.statemachine.raise_motor_control_set_acceleration(value)


class System:
	"""Implementation of the state machine System.
	"""

	class State:
		""" State Enum
		"""
		(
			main_region_system,
			main_region_system_region_default,
			null_state
		) = range(3)
	
	
	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc. 
		"""
		
		self.__physics = None
		self.__motor_control = None
		self.__trolley = None
		
		self.in_event_queue = queue.Queue()
		self.trolley_set_target_speed = None
		self.trolley_set_target_speed_observer = TrolleySetTargetSpeedObserver(self)
		self.trolley_set_target_speed_value = None
		
		self.physics_update = None
		self.physics_update_observer = PhysicsUpdateObserver(self)
		
		self.motor_control_set_acceleration = None
		self.motor_control_set_acceleration_observer = MotorControlSetAccelerationObserver(self)
		self.motor_control_set_acceleration_value = None
		
		# enumeration of all states:
		self.__State = System.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 1
		for __state_index in range(1):
			self.__state_vector[__state_index] = self.State.null_state
		
		# initializations:
		self.physics = None
		self.motor_control = None
		self.trolley = None
		self.__is_executing = False
	
	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state
	
	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False
			
	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.main_region_system:
			return (self.__state_vector[0] >= self.__State.main_region_system)\
				and (self.__state_vector[0] <= self.__State.main_region_system_region_default)
		if s == self.__State.main_region_system_region_default:
			return self.__state_vector[0] == self.__State.main_region_system_region_default
		return False
		
	def __execute_queued_event(self, func):
		func()
	
	def __get_next_event(self):
		if not self.in_event_queue.empty():
			return self.in_event_queue.get()
		return None
	
	
	def raise_trolley_set_target_speed(self, value):
		"""Raise method for event trolley_set_target_speed.
		"""
		self.in_event_queue.put(lambda: self.__raise_trolley_set_target_speed_call(value))
		self.run_cycle()
	
	def __raise_trolley_set_target_speed_call(self, value):
		"""Raise callback for event trolley_set_target_speed.
		"""
		self.trolley_set_target_speed = True
		self.trolley_set_target_speed_value = value
	
	def raise_physics_update(self):
		"""Raise method for event physics_update.
		"""
		self.in_event_queue.put(self.__raise_physics_update_call)
		self.run_cycle()
	
	def __raise_physics_update_call(self):
		"""Raise callback for event physics_update.
		"""
		self.physics_update = True
	
	def raise_motor_control_set_acceleration(self, value):
		"""Raise method for event motor_control_set_acceleration.
		"""
		self.in_event_queue.put(lambda: self.__raise_motor_control_set_acceleration_call(value))
		self.run_cycle()
	
	def __raise_motor_control_set_acceleration_call(self, value):
		"""Raise callback for event motor_control_set_acceleration.
		"""
		self.motor_control_set_acceleration = True
		self.motor_control_set_acceleration_value = value
	
	@property
	def physics(self):
		"""Property for physics.
		"""
		return self.__physics
	
	@physics.setter
	def physics(self, value):
		"""Setter for physics.
		"""
		if self.physics is not None:
			self.physics.update_observable.unsubscribe(self.physics_update_observer)
		self.__physics = value
		if self.physics is not None:
			self.physics.update_observable.subscribe(self.physics_update_observer)
	
	@property
	def motor_control(self):
		"""Property for motor_control.
		"""
		return self.__motor_control
	
	@motor_control.setter
	def motor_control(self, value):
		"""Setter for motor_control.
		"""
		if self.motor_control is not None:
			self.motor_control.set_acceleration_observable.unsubscribe(self.motor_control_set_acceleration_observer)
		self.__motor_control = value
		if self.motor_control is not None:
			self.motor_control.set_acceleration_observable.subscribe(self.motor_control_set_acceleration_observer)
	
	@property
	def trolley(self):
		"""Property for trolley.
		"""
		return self.__trolley
	
	@trolley.setter
	def trolley(self, value):
		"""Setter for trolley.
		"""
		if self.trolley is not None:
			self.trolley.set_target_speed_observable.unsubscribe(self.trolley_set_target_speed_observer)
		self.__trolley = value
		if self.trolley is not None:
			self.trolley.set_target_speed_observable.subscribe(self.trolley_set_target_speed_observer)
	
	def __check_main_region_system_region__choice_0_tr0_tr0(self):
		""".
		"""
		return self.motor_control_set_acceleration_value == 0
		
	def __effect_main_region_system_region__choice_0_tr0(self):
		""".
		"""
		self.trolley.raise_at_target_speed()
		self.__enter_sequence_main_region_system_region_default_default()
		
	def __effect_main_region_system_region__choice_0_tr1(self):
		""".
		"""
		self.__enter_sequence_main_region_system_region_default_default()
		
	def __entry_action_main_region_system(self):
		"""Entry action for state 'System'..
		"""
		self.physics.enter()
		self.motor_control.enter()
		self.trolley.enter()
		
	def __exit_action_main_region_system(self):
		"""Exit action for state 'System'..
		"""
		self.trolley.exit()
		self.motor_control.exit()
		self.physics.exit()
		
	def __enter_sequence_main_region_system_default(self):
		"""'default' enter sequence for state System.
		"""
		self.__entry_action_main_region_system()
		self.__enter_sequence_main_region_system_region_default()
		
	def __enter_sequence_main_region_system_region_default_default(self):
		"""'default' enter sequence for state Default.
		"""
		self.__state_vector[0] = self.State.main_region_system_region_default
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_default(self):
		"""'default' enter sequence for region main region.
		"""
		self.__react_main_region__entry_default()
		
	def __enter_sequence_main_region_system_region_default(self):
		"""'default' enter sequence for region region.
		"""
		self.__react_main_region_system_region__entry_default()
		
	def __exit_sequence_main_region_system_region_default(self):
		"""Default exit sequence for state Default.
		"""
		self.__state_vector[0] = self.State.null_state
		
	def __exit_sequence_main_region(self):
		"""Default exit sequence for region main region.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_system_region_default:
			self.__exit_sequence_main_region_system_region_default()
			self.__exit_action_main_region_system()
		
	def __react_main_region_system_region__choice_0(self):
		"""The reactions of state null..
		"""
		if self.__check_main_region_system_region__choice_0_tr0_tr0():
			self.__effect_main_region_system_region__choice_0_tr0()
		else:
			self.__effect_main_region_system_region__choice_0_tr1()
		
	def __react_main_region_system_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_system_region_default_default()
		
	def __react_main_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_system_default()
		
	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		return transitioned_before
	
	
	def __main_region_system_react(self, transitioned_before):
		"""Implementation of __main_region_system_react function.
		"""
		transitioned_after = transitioned_before
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_system_region_default_react(self, transitioned_before):
		"""Implementation of __main_region_system_region_default_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.trolley_set_target_speed:
				self.__exit_sequence_main_region_system_region_default()
				self.motor_control.raise_set_target_speed(self.trolley_set_target_speed_value)
				self.__enter_sequence_main_region_system_region_default_default()
				self.__main_region_system_react(0)
				transitioned_after = 0
			elif self.physics_update:
				self.__exit_sequence_main_region_system_region_default()
				self.motor_control.raise_set_actual_speed(self.physics.v)
				self.__enter_sequence_main_region_system_region_default_default()
				self.__main_region_system_react(0)
				transitioned_after = 0
			elif self.motor_control_set_acceleration:
				self.__exit_sequence_main_region_system_region_default()
				self.physics.raise_set_acceleration(self.motor_control_set_acceleration_value)
				self.__react_main_region_system_region__choice_0()
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_system_react(transitioned_before)
		return transitioned_after
	
	
	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.trolley_set_target_speed = False
		self.physics_update = False
		self.motor_control_set_acceleration = False
	
	
	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_system_region_default:
			self.__main_region_system_region_default_react(-1)
	
	
	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		if self.__is_executing:
			return
		self.__is_executing = True
		next_event = self.__get_next_event()
		if next_event is not None:
			self.__execute_queued_event(next_event)
		condition_0 = True
		while condition_0:
			self.__micro_step()
			self.__clear_in_events()
			next_event = self.__get_next_event()
			if next_event is not None:
				self.__execute_queued_event(next_event)
			condition_0 = self.trolley_set_target_speed or self.physics_update or self.motor_control_set_acceleration
		self.__is_executing = False
	
	
	def enter(self):
		"""Implementation of enter function.
		"""
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__enter_sequence_main_region_default()
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		"""
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__exit_sequence_main_region()
		self.__is_executing = False
	
	
	
