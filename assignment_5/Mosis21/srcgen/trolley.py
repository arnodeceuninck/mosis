"""Implementation of statechart trolley.
Generated by YAKINDU Statechart Tools code generator.
"""

import queue
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../src')))
from yakindu.rx import Observable

class Trolley:
	"""Implementation of the state machine Trolley.
	"""

	class State:
		""" State Enum
		"""
		(
			main_region_trolley,
			main_region_trolley_boarding_manager_doors_closed,
			main_region_trolley_boarding_manager_doors_open,
			main_region_trolley_boarding_manager_doors_open_r1boarding_possible,
			main_region_trolley_boarding_manager_doors_open_r1doors_obstructed,
			main_region_trolley_departure_arrival_arrival_at_a_station,
			main_region_trolley_departure_arrival_arrival_at_a_station_r1just_arrived,
			main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open,
			main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open_awaiting_request,
			main_region_trolley_departure_arrival_departure_to_a_station,
			main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors,
			main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_free,
			main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_obstructed,
			main_region_trolley_departure_arrival_departure_to_a_station_r1doors_closed,
			main_region_trolley_departure_arrival_departure_to_a_station_r1respond_to_approaching_station,
			main_region_trolley_departure_arrival_departure_to_a_station_r1break_until_standstill,
			main_region_trolley_departure_arrival_departure_to_a_station_r1start_departure,
			main_region_trolley_departure_arrival_emergency_stop,
			main_region_trolley_departure_arrival_emergency_stop_r1emergency_started,
			main_region_trolley_departure_arrival_emergency_stop_r1break_until_standstill,
			main_region_trolley_departure_arrival_emergency_stop_r1doors_open,
			main_region_trolley_departure_arrival_emergency_stop_r1doors_open_arrival,
			main_region_trolley_request_handler_accepting_requests,
			null_state
		) = range(24)
	
	
	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc. 
		"""
		
		self.stops_at = None
		self.remaining_capacity = None
		self.num_passengers = None
		self.approaching_station = None
		self.approaching_station_value = None
		self.open_doors = None
		self.open_doors_observable = Observable()
		self.close_doors = None
		self.close_doors_observable = Observable()
		self.start_doors_signal = None
		self.start_doors_signal_observable = Observable()
		self.stop_doors_signal = None
		self.stop_doors_signal_observable = Observable()
		self.board = None
		self.unboard = None
		self.request_stop = None
		self.request_stop_value = None
		self.set_target_speed = None
		self.set_target_speed_value = None
		self.set_target_speed_observable = Observable()
		self.at_target_speed = None
		self.start_emergency = None
		self.stop_emergency = None
		self.refresh_ui = None
		self.refresh_ui_observable = Observable()
		
		self.__internal_event_queue = queue.Queue()
		self.in_event_queue = queue.Queue()
		self.__is_door_obstructed = None
		self.__is_door_available = None
		self.__is_emergency_active = None
		self.__was_departure_state = None
		self.__current_station = None
		self.door_free = None
		self.door_obstructed = None
		self.stop_added = None
		self.open_doors_in = None
		self.close_doors_in = None
		
		# enumeration of all states:
		self.__State = Trolley.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 3
		for __state_index in range(3):
			self.__state_vector[__state_index] = self.State.null_state
		
		# for timed statechart:
		self.timer_service = None
		self.__time_events = [None] * 6
		
		# initializations:
		self.stops_at = 1
		self.remaining_capacity = 6
		self.num_passengers = 0
		self.__is_door_obstructed = False
		self.__is_door_available = False
		self.__is_emergency_active = False
		self.__was_departure_state = False
		self.__current_station = 0
		self.__is_executing = False
		self.__state_conf_vector_position = None
	
	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state or self.__state_vector[1] is not self.__State.null_state or self.__state_vector[2] is not self.__State.null_state
	
	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False
			
	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.main_region_trolley:
			return (self.__state_vector[0] >= self.__State.main_region_trolley)\
				and (self.__state_vector[0] <= self.__State.main_region_trolley_request_handler_accepting_requests)
		if s == self.__State.main_region_trolley_boarding_manager_doors_closed:
			return self.__state_vector[0] == self.__State.main_region_trolley_boarding_manager_doors_closed
		if s == self.__State.main_region_trolley_boarding_manager_doors_open:
			return (self.__state_vector[0] >= self.__State.main_region_trolley_boarding_manager_doors_open)\
				and (self.__state_vector[0] <= self.__State.main_region_trolley_boarding_manager_doors_open_r1doors_obstructed)
		if s == self.__State.main_region_trolley_boarding_manager_doors_open_r1boarding_possible:
			return self.__state_vector[0] == self.__State.main_region_trolley_boarding_manager_doors_open_r1boarding_possible
		if s == self.__State.main_region_trolley_boarding_manager_doors_open_r1doors_obstructed:
			return self.__state_vector[0] == self.__State.main_region_trolley_boarding_manager_doors_open_r1doors_obstructed
		if s == self.__State.main_region_trolley_departure_arrival_arrival_at_a_station:
			return (self.__state_vector[1] >= self.__State.main_region_trolley_departure_arrival_arrival_at_a_station)\
				and (self.__state_vector[1] <= self.__State.main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open_awaiting_request)
		if s == self.__State.main_region_trolley_departure_arrival_arrival_at_a_station_r1just_arrived:
			return self.__state_vector[1] == self.__State.main_region_trolley_departure_arrival_arrival_at_a_station_r1just_arrived
		if s == self.__State.main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open:
			return self.__state_vector[1] == self.__State.main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open
		if s == self.__State.main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open_awaiting_request:
			return self.__state_vector[1] == self.__State.main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open_awaiting_request
		if s == self.__State.main_region_trolley_departure_arrival_departure_to_a_station:
			return (self.__state_vector[1] >= self.__State.main_region_trolley_departure_arrival_departure_to_a_station)\
				and (self.__state_vector[1] <= self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1start_departure)
		if s == self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors:
			return (self.__state_vector[1] >= self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors)\
				and (self.__state_vector[1] <= self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_obstructed)
		if s == self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_free:
			return self.__state_vector[1] == self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_free
		if s == self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_obstructed:
			return self.__state_vector[1] == self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_obstructed
		if s == self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1doors_closed:
			return self.__state_vector[1] == self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1doors_closed
		if s == self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1respond_to_approaching_station:
			return self.__state_vector[1] == self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1respond_to_approaching_station
		if s == self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1break_until_standstill:
			return self.__state_vector[1] == self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1break_until_standstill
		if s == self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1start_departure:
			return self.__state_vector[1] == self.__State.main_region_trolley_departure_arrival_departure_to_a_station_r1start_departure
		if s == self.__State.main_region_trolley_departure_arrival_emergency_stop:
			return (self.__state_vector[1] >= self.__State.main_region_trolley_departure_arrival_emergency_stop)\
				and (self.__state_vector[1] <= self.__State.main_region_trolley_departure_arrival_emergency_stop_r1doors_open_arrival)
		if s == self.__State.main_region_trolley_departure_arrival_emergency_stop_r1emergency_started:
			return self.__state_vector[1] == self.__State.main_region_trolley_departure_arrival_emergency_stop_r1emergency_started
		if s == self.__State.main_region_trolley_departure_arrival_emergency_stop_r1break_until_standstill:
			return self.__state_vector[1] == self.__State.main_region_trolley_departure_arrival_emergency_stop_r1break_until_standstill
		if s == self.__State.main_region_trolley_departure_arrival_emergency_stop_r1doors_open:
			return self.__state_vector[1] == self.__State.main_region_trolley_departure_arrival_emergency_stop_r1doors_open
		if s == self.__State.main_region_trolley_departure_arrival_emergency_stop_r1doors_open_arrival:
			return self.__state_vector[1] == self.__State.main_region_trolley_departure_arrival_emergency_stop_r1doors_open_arrival
		if s == self.__State.main_region_trolley_request_handler_accepting_requests:
			return self.__state_vector[2] == self.__State.main_region_trolley_request_handler_accepting_requests
		return False
		
	def time_elapsed(self, event_id):
		"""Add time events to in event queue
		"""
		if event_id in range(6):
			self.in_event_queue.put(lambda: self.raise_time_event(event_id))
			self.run_cycle()
	
	def raise_time_event(self, event_id):
		"""Raise timed events using the event_id.
		"""
		self.__time_events[event_id] = True
	
	def __execute_queued_event(self, func):
		func()
	
	def __get_next_event(self):
		if not self.__internal_event_queue.empty():
			return self.__internal_event_queue.get()
		if not self.in_event_queue.empty():
			return self.in_event_queue.get()
		return None
	
	
	def raise_door_free(self):
		"""Raise method for event door_free.
		"""
		self.__internal_event_queue.put(self.__raise_door_free_call)
	
	def __raise_door_free_call(self):
		"""Raise callback for event door_free.
		"""
		self.door_free = True
	
	def raise_door_obstructed(self):
		"""Raise method for event door_obstructed.
		"""
		self.__internal_event_queue.put(self.__raise_door_obstructed_call)
	
	def __raise_door_obstructed_call(self):
		"""Raise callback for event door_obstructed.
		"""
		self.door_obstructed = True
	
	def raise_stop_added(self):
		"""Raise method for event stop_added.
		"""
		self.__internal_event_queue.put(self.__raise_stop_added_call)
	
	def __raise_stop_added_call(self):
		"""Raise callback for event stop_added.
		"""
		self.stop_added = True
	
	def raise_open_doors_in(self):
		"""Raise method for event open_doors_in.
		"""
		self.__internal_event_queue.put(self.__raise_open_doors_in_call)
	
	def __raise_open_doors_in_call(self):
		"""Raise callback for event open_doors_in.
		"""
		self.open_doors_in = True
	
	def raise_close_doors_in(self):
		"""Raise method for event close_doors_in.
		"""
		self.__internal_event_queue.put(self.__raise_close_doors_in_call)
	
	def __raise_close_doors_in_call(self):
		"""Raise callback for event close_doors_in.
		"""
		self.close_doors_in = True
	
	def raise_approaching_station(self, value):
		"""Raise method for event approaching_station.
		"""
		self.in_event_queue.put(lambda: self.__raise_approaching_station_call(value))
		self.run_cycle()
	
	def __raise_approaching_station_call(self, value):
		"""Raise callback for event approaching_station.
		"""
		self.approaching_station = True
		self.approaching_station_value = value
	
	def raise_board(self):
		"""Raise method for event board.
		"""
		self.in_event_queue.put(self.__raise_board_call)
		self.run_cycle()
	
	def __raise_board_call(self):
		"""Raise callback for event board.
		"""
		self.board = True
	
	def raise_unboard(self):
		"""Raise method for event unboard.
		"""
		self.in_event_queue.put(self.__raise_unboard_call)
		self.run_cycle()
	
	def __raise_unboard_call(self):
		"""Raise callback for event unboard.
		"""
		self.unboard = True
	
	def raise_request_stop(self, value):
		"""Raise method for event request_stop.
		"""
		self.in_event_queue.put(lambda: self.__raise_request_stop_call(value))
		self.run_cycle()
	
	def __raise_request_stop_call(self, value):
		"""Raise callback for event request_stop.
		"""
		self.request_stop = True
		self.request_stop_value = value
	
	def raise_at_target_speed(self):
		"""Raise method for event at_target_speed.
		"""
		self.in_event_queue.put(self.__raise_at_target_speed_call)
		self.run_cycle()
	
	def __raise_at_target_speed_call(self):
		"""Raise callback for event at_target_speed.
		"""
		self.at_target_speed = True
	
	def raise_start_emergency(self):
		"""Raise method for event start_emergency.
		"""
		self.in_event_queue.put(self.__raise_start_emergency_call)
		self.run_cycle()
	
	def __raise_start_emergency_call(self):
		"""Raise callback for event start_emergency.
		"""
		self.start_emergency = True
	
	def raise_stop_emergency(self):
		"""Raise method for event stop_emergency.
		"""
		self.in_event_queue.put(self.__raise_stop_emergency_call)
		self.run_cycle()
	
	def __raise_stop_emergency_call(self):
		"""Raise callback for event stop_emergency.
		"""
		self.stop_emergency = True
	
	def __check_main_region_trolley_departure_arrival_arrival_at_a_station_r1__choice_0_tr1_tr1(self):
		""".
		"""
		return ((self.stops_at & ~((1 << self.__current_station)))) != 0
		
	def __check_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1__choice_0_tr0_tr0(self):
		""".
		"""
		return self.__is_door_obstructed
		
	def __check_main_region_trolley_departure_arrival_emergency_stop_r1__choice_0_tr0_tr0(self):
		""".
		"""
		return self.__was_departure_state
		
	def __effect_main_region_trolley_departure_arrival_arrival_at_a_station_r1__choice_0_tr1(self):
		""".
		"""
		self.__exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station()
		self.__enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_default()
		
	def __effect_main_region_trolley_departure_arrival_arrival_at_a_station_r1__choice_0_tr0(self):
		""".
		"""
		self.__enter_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_awaiting_request_default()
		
	def __effect_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1__choice_0_tr0(self):
		""".
		"""
		self.__enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_obstructed_default()
		
	def __effect_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1__choice_0_tr1(self):
		""".
		"""
		self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors()
		self.__enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_doors_closed_default()
		self.__main_region_trolley_departure_arrival_departure_to_a_station_react(1)
		
	def __effect_main_region_trolley_departure_arrival_emergency_stop_r1__choice_0_tr0(self):
		""".
		"""
		self.__enter_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_break_until_standstill_default()
		
	def __effect_main_region_trolley_departure_arrival_emergency_stop_r1__choice_0_tr1(self):
		""".
		"""
		self.__enter_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_arrival_default()
		
	def __entry_action_main_region_trolley_boarding_manager_doors_open_r1_boarding_possible(self):
		"""Entry action for state 'BoardingPossible'..
		"""
		self.__is_door_obstructed = False
		self.raise_door_free()
		
	def __entry_action_main_region_trolley_boarding_manager_doors_open_r1_doors_obstructed(self):
		"""Entry action for state 'DoorsObstructed'..
		"""
		self.timer_service.set_timer(self, 0, (1 * 1000), False)
		self.raise_door_obstructed()
		self.refresh_ui_observable.next()
		self.__is_door_obstructed = True
		
	def __entry_action_main_region_trolley_departure_arrival_arrival_at_a_station_r1_just_arrived(self):
		"""Entry action for state 'Just Arrived'..
		"""
		self.timer_service.set_timer(self, 1, (1 * 1000), False)
		self.__was_departure_state = False
		
	def __entry_action_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open(self):
		"""Entry action for state 'DoorsOpen'..
		"""
		self.timer_service.set_timer(self, 2, (2 * 1000), False)
		self.raise_open_doors_in()
		self.open_doors_observable.next()
		self.__is_door_available = True
		
	def __entry_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors(self):
		"""Entry action for state 'ClosingDoors'..
		"""
		self.start_doors_signal_observable.next()
		
	def __entry_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free(self):
		"""Entry action for state 'DoorsFree'..
		"""
		self.timer_service.set_timer(self, 3, (1 * 1000), False)
		
	def __entry_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_doors_closed(self):
		"""Entry action for state 'DoorsClosed'..
		"""
		self.timer_service.set_timer(self, 4, (1 * 1000), False)
		self.__is_door_available = False
		
	def __entry_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_break_until_standstill(self):
		"""Entry action for state 'BreakUntilStandstill'..
		"""
		self.set_target_speed_observable.next(0)
		
	def __entry_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_start_departure(self):
		"""Entry action for state 'StartDeparture'..
		"""
		self.set_target_speed_observable.next(24)
		
	def __entry_action_main_region_trolley_departure_arrival_emergency_stop_r1_emergency_started(self):
		"""Entry action for state 'EmergencyStarted'..
		"""
		self.timer_service.set_timer(self, 5, (0 * 1000), False)
		self.__is_emergency_active = True
		
	def __entry_action_main_region_trolley_departure_arrival_emergency_stop_r1_break_until_standstill(self):
		"""Entry action for state 'BreakUntilStandstill'..
		"""
		self.set_target_speed_observable.next(0)
		
	def __entry_action_main_region_trolley_departure_arrival_emergency_stop_r1_doors_open(self):
		"""Entry action for state 'DoorsOpen'..
		"""
		self.raise_open_doors_in()
		self.open_doors_observable.next()
		self.__is_door_available = True
		
	def __entry_action_main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_arrival(self):
		"""Entry action for state 'DoorsOpenArrival'..
		"""
		self.raise_open_doors_in()
		self.open_doors_observable.next()
		self.__is_door_available = True
		
	def __exit_action_main_region_trolley_boarding_manager_doors_open_r1_doors_obstructed(self):
		"""Exit action for state 'DoorsObstructed'..
		"""
		self.timer_service.unset_timer(self, 0)
		
	def __exit_action_main_region_trolley_departure_arrival_arrival_at_a_station_r1_just_arrived(self):
		"""Exit action for state 'Just Arrived'..
		"""
		self.timer_service.unset_timer(self, 1)
		
	def __exit_action_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open(self):
		"""Exit action for state 'DoorsOpen'..
		"""
		self.timer_service.unset_timer(self, 2)
		
	def __exit_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors(self):
		"""Exit action for state 'ClosingDoors'..
		"""
		self.stops_at = self.stops_at & ~((1 << self.__current_station))
		self.close_doors_observable.next()
		self.raise_close_doors_in()
		self.stop_doors_signal_observable.next()
		self.refresh_ui_observable.next()
		self.__was_departure_state = True
		
	def __exit_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free(self):
		"""Exit action for state 'DoorsFree'..
		"""
		self.timer_service.unset_timer(self, 3)
		
	def __exit_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_doors_closed(self):
		"""Exit action for state 'DoorsClosed'..
		"""
		self.timer_service.unset_timer(self, 4)
		
	def __exit_action_main_region_trolley_departure_arrival_emergency_stop_r1_emergency_started(self):
		"""Exit action for state 'EmergencyStarted'..
		"""
		self.timer_service.unset_timer(self, 5)
		
	def __enter_sequence_main_region_trolley_default(self):
		"""'default' enter sequence for state Trolley.
		"""
		self.__enter_sequence_main_region_trolley_boarding_manager_default()
		self.__enter_sequence_main_region_trolley_departure_arrival_default()
		self.__enter_sequence_main_region_trolley_request_handler_default()
		
	def __enter_sequence_main_region_trolley_boarding_manager_doors_closed_default(self):
		"""'default' enter sequence for state DoorsClosed.
		"""
		self.__state_vector[0] = self.State.main_region_trolley_boarding_manager_doors_closed
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_boarding_manager_doors_open_default(self):
		"""'default' enter sequence for state DoorsOpen.
		"""
		self.__enter_sequence_main_region_trolley_boarding_manager_doors_open_r1_default()
		
	def __enter_sequence_main_region_trolley_boarding_manager_doors_open_r1_boarding_possible_default(self):
		"""'default' enter sequence for state BoardingPossible.
		"""
		self.__entry_action_main_region_trolley_boarding_manager_doors_open_r1_boarding_possible()
		self.__state_vector[0] = self.State.main_region_trolley_boarding_manager_doors_open_r1boarding_possible
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_boarding_manager_doors_open_r1_doors_obstructed_default(self):
		"""'default' enter sequence for state DoorsObstructed.
		"""
		self.__entry_action_main_region_trolley_boarding_manager_doors_open_r1_doors_obstructed()
		self.__state_vector[0] = self.State.main_region_trolley_boarding_manager_doors_open_r1doors_obstructed
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_default(self):
		"""'default' enter sequence for state Arrival at a station.
		"""
		self.__enter_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_default()
		
	def __enter_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_just_arrived_default(self):
		"""'default' enter sequence for state Just Arrived.
		"""
		self.__entry_action_main_region_trolley_departure_arrival_arrival_at_a_station_r1_just_arrived()
		self.__state_vector[1] = self.State.main_region_trolley_departure_arrival_arrival_at_a_station_r1just_arrived
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_default(self):
		"""'default' enter sequence for state DoorsOpen.
		"""
		self.__entry_action_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open()
		self.__state_vector[1] = self.State.main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_awaiting_request_default(self):
		"""'default' enter sequence for state DoorsOpenAwaitingRequest.
		"""
		self.__state_vector[1] = self.State.main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open_awaiting_request
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_default(self):
		"""'default' enter sequence for state Departure to a station.
		"""
		self.__enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_default()
		
	def __enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_default(self):
		"""'default' enter sequence for state ClosingDoors.
		"""
		self.__entry_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors()
		self.__enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_default()
		
	def __enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free_default(self):
		"""'default' enter sequence for state DoorsFree.
		"""
		self.__entry_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free()
		self.__state_vector[1] = self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_free
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_obstructed_default(self):
		"""'default' enter sequence for state DoorsObstructed.
		"""
		self.__state_vector[1] = self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_obstructed
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_doors_closed_default(self):
		"""'default' enter sequence for state DoorsClosed.
		"""
		self.__entry_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_doors_closed()
		self.__state_vector[1] = self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1doors_closed
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_respond_to_approaching_station_default(self):
		"""'default' enter sequence for state RespondToApproachingStation.
		"""
		self.__state_vector[1] = self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1respond_to_approaching_station
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_break_until_standstill_default(self):
		"""'default' enter sequence for state BreakUntilStandstill.
		"""
		self.__entry_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_break_until_standstill()
		self.__state_vector[1] = self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1break_until_standstill
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_start_departure_default(self):
		"""'default' enter sequence for state StartDeparture.
		"""
		self.__entry_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_start_departure()
		self.__state_vector[1] = self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1start_departure
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_departure_arrival_emergency_stop_default(self):
		"""'default' enter sequence for state EmergencyStop.
		"""
		self.__enter_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_default()
		
	def __enter_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_emergency_started_default(self):
		"""'default' enter sequence for state EmergencyStarted.
		"""
		self.__entry_action_main_region_trolley_departure_arrival_emergency_stop_r1_emergency_started()
		self.__state_vector[1] = self.State.main_region_trolley_departure_arrival_emergency_stop_r1emergency_started
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_break_until_standstill_default(self):
		"""'default' enter sequence for state BreakUntilStandstill.
		"""
		self.__entry_action_main_region_trolley_departure_arrival_emergency_stop_r1_break_until_standstill()
		self.__state_vector[1] = self.State.main_region_trolley_departure_arrival_emergency_stop_r1break_until_standstill
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_default(self):
		"""'default' enter sequence for state DoorsOpen.
		"""
		self.__entry_action_main_region_trolley_departure_arrival_emergency_stop_r1_doors_open()
		self.__state_vector[1] = self.State.main_region_trolley_departure_arrival_emergency_stop_r1doors_open
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_arrival_default(self):
		"""'default' enter sequence for state DoorsOpenArrival.
		"""
		self.__entry_action_main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_arrival()
		self.__state_vector[1] = self.State.main_region_trolley_departure_arrival_emergency_stop_r1doors_open_arrival
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_trolley_request_handler_accepting_requests_default(self):
		"""'default' enter sequence for state AcceptingRequests.
		"""
		self.__state_vector[2] = self.State.main_region_trolley_request_handler_accepting_requests
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True
		
	def __enter_sequence_main_region_default(self):
		"""'default' enter sequence for region main region.
		"""
		self.__react_main_region__entry_default()
		
	def __enter_sequence_main_region_trolley_boarding_manager_default(self):
		"""'default' enter sequence for region BoardingManager.
		"""
		self.__react_main_region_trolley_boarding_manager__entry_default()
		
	def __enter_sequence_main_region_trolley_boarding_manager_doors_open_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		self.__react_main_region_trolley_boarding_manager_doors_open_r1__entry_default()
		
	def __enter_sequence_main_region_trolley_departure_arrival_default(self):
		"""'default' enter sequence for region Departure Arrival.
		"""
		self.__react_main_region_trolley_departure_arrival__entry_default()
		
	def __enter_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		self.__react_main_region_trolley_departure_arrival_arrival_at_a_station_r1__entry_default()
		
	def __enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		self.__react_main_region_trolley_departure_arrival_departure_to_a_station_r1__entry_default()
		
	def __enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		self.__react_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1__entry_default()
		
	def __enter_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_default(self):
		"""'default' enter sequence for region r1.
		"""
		self.__react_main_region_trolley_departure_arrival_emergency_stop_r1__entry_default()
		
	def __enter_sequence_main_region_trolley_request_handler_default(self):
		"""'default' enter sequence for region requestHandler.
		"""
		self.__react_main_region_trolley_request_handler__entry_default()
		
	def __exit_sequence_main_region_trolley_boarding_manager_doors_closed(self):
		"""Default exit sequence for state DoorsClosed.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_trolley_boarding_manager_doors_open(self):
		"""Default exit sequence for state DoorsOpen.
		"""
		self.__exit_sequence_main_region_trolley_boarding_manager_doors_open_r1()
		
	def __exit_sequence_main_region_trolley_boarding_manager_doors_open_r1_boarding_possible(self):
		"""Default exit sequence for state BoardingPossible.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		
	def __exit_sequence_main_region_trolley_boarding_manager_doors_open_r1_doors_obstructed(self):
		"""Default exit sequence for state DoorsObstructed.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0
		self.__exit_action_main_region_trolley_boarding_manager_doors_open_r1_doors_obstructed()
		
	def __exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station(self):
		"""Default exit sequence for state Arrival at a station.
		"""
		self.__exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1()
		
	def __exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_just_arrived(self):
		"""Default exit sequence for state Just Arrived.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		self.__exit_action_main_region_trolley_departure_arrival_arrival_at_a_station_r1_just_arrived()
		
	def __exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open(self):
		"""Default exit sequence for state DoorsOpen.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		self.__exit_action_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open()
		
	def __exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_awaiting_request(self):
		"""Default exit sequence for state DoorsOpenAwaitingRequest.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station(self):
		"""Default exit sequence for state Departure to a station.
		"""
		self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1()
		
	def __exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors(self):
		"""Default exit sequence for state ClosingDoors.
		"""
		self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1()
		self.__exit_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors()
		
	def __exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free(self):
		"""Default exit sequence for state DoorsFree.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		self.__exit_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free()
		
	def __exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_obstructed(self):
		"""Default exit sequence for state DoorsObstructed.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_doors_closed(self):
		"""Default exit sequence for state DoorsClosed.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		self.__exit_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_doors_closed()
		
	def __exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_respond_to_approaching_station(self):
		"""Default exit sequence for state RespondToApproachingStation.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_break_until_standstill(self):
		"""Default exit sequence for state BreakUntilStandstill.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_start_departure(self):
		"""Default exit sequence for state StartDeparture.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_trolley_departure_arrival_emergency_stop(self):
		"""Default exit sequence for state EmergencyStop.
		"""
		self.__exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1()
		
	def __exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_emergency_started(self):
		"""Default exit sequence for state EmergencyStarted.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		self.__exit_action_main_region_trolley_departure_arrival_emergency_stop_r1_emergency_started()
		
	def __exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_break_until_standstill(self):
		"""Default exit sequence for state BreakUntilStandstill.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_doors_open(self):
		"""Default exit sequence for state DoorsOpen.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_arrival(self):
		"""Default exit sequence for state DoorsOpenArrival.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1
		
	def __exit_sequence_main_region_trolley_request_handler_accepting_requests(self):
		"""Default exit sequence for state AcceptingRequests.
		"""
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2
		
	def __exit_sequence_main_region(self):
		"""Default exit sequence for region main region.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_trolley_boarding_manager_doors_closed:
			self.__exit_sequence_main_region_trolley_boarding_manager_doors_closed()
		elif state == self.State.main_region_trolley_boarding_manager_doors_open_r1boarding_possible:
			self.__exit_sequence_main_region_trolley_boarding_manager_doors_open_r1_boarding_possible()
		elif state == self.State.main_region_trolley_boarding_manager_doors_open_r1doors_obstructed:
			self.__exit_sequence_main_region_trolley_boarding_manager_doors_open_r1_doors_obstructed()
		state = self.__state_vector[1]
		if state == self.State.main_region_trolley_departure_arrival_arrival_at_a_station_r1just_arrived:
			self.__exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_just_arrived()
		elif state == self.State.main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open:
			self.__exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open()
		elif state == self.State.main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open_awaiting_request:
			self.__exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_awaiting_request()
		elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_free:
			self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free()
			self.__exit_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors()
		elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_obstructed:
			self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_obstructed()
			self.__exit_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors()
		elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1doors_closed:
			self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_doors_closed()
		elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1respond_to_approaching_station:
			self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_respond_to_approaching_station()
		elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1break_until_standstill:
			self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_break_until_standstill()
		elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1start_departure:
			self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_start_departure()
		elif state == self.State.main_region_trolley_departure_arrival_emergency_stop_r1emergency_started:
			self.__exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_emergency_started()
		elif state == self.State.main_region_trolley_departure_arrival_emergency_stop_r1break_until_standstill:
			self.__exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_break_until_standstill()
		elif state == self.State.main_region_trolley_departure_arrival_emergency_stop_r1doors_open:
			self.__exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_doors_open()
		elif state == self.State.main_region_trolley_departure_arrival_emergency_stop_r1doors_open_arrival:
			self.__exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_arrival()
		state = self.__state_vector[2]
		if state == self.State.main_region_trolley_request_handler_accepting_requests:
			self.__exit_sequence_main_region_trolley_request_handler_accepting_requests()
		
	def __exit_sequence_main_region_trolley_boarding_manager_doors_open_r1(self):
		"""Default exit sequence for region r1.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_trolley_boarding_manager_doors_open_r1boarding_possible:
			self.__exit_sequence_main_region_trolley_boarding_manager_doors_open_r1_boarding_possible()
		elif state == self.State.main_region_trolley_boarding_manager_doors_open_r1doors_obstructed:
			self.__exit_sequence_main_region_trolley_boarding_manager_doors_open_r1_doors_obstructed()
		
	def __exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1(self):
		"""Default exit sequence for region r1.
		"""
		state = self.__state_vector[1]
		if state == self.State.main_region_trolley_departure_arrival_arrival_at_a_station_r1just_arrived:
			self.__exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_just_arrived()
		elif state == self.State.main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open:
			self.__exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open()
		elif state == self.State.main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open_awaiting_request:
			self.__exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_awaiting_request()
		
	def __exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1(self):
		"""Default exit sequence for region r1.
		"""
		state = self.__state_vector[1]
		if state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_free:
			self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free()
			self.__exit_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors()
		elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_obstructed:
			self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_obstructed()
			self.__exit_action_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors()
		elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1doors_closed:
			self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_doors_closed()
		elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1respond_to_approaching_station:
			self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_respond_to_approaching_station()
		elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1break_until_standstill:
			self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_break_until_standstill()
		elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1start_departure:
			self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_start_departure()
		
	def __exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1(self):
		"""Default exit sequence for region r1.
		"""
		state = self.__state_vector[1]
		if state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_free:
			self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free()
		elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_obstructed:
			self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_obstructed()
		
	def __exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1(self):
		"""Default exit sequence for region r1.
		"""
		state = self.__state_vector[1]
		if state == self.State.main_region_trolley_departure_arrival_emergency_stop_r1emergency_started:
			self.__exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_emergency_started()
		elif state == self.State.main_region_trolley_departure_arrival_emergency_stop_r1break_until_standstill:
			self.__exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_break_until_standstill()
		elif state == self.State.main_region_trolley_departure_arrival_emergency_stop_r1doors_open:
			self.__exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_doors_open()
		elif state == self.State.main_region_trolley_departure_arrival_emergency_stop_r1doors_open_arrival:
			self.__exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_arrival()
		
	def __react_main_region_trolley_departure_arrival_arrival_at_a_station_r1__choice_0(self):
		"""The reactions of state null..
		"""
		if self.__check_main_region_trolley_departure_arrival_arrival_at_a_station_r1__choice_0_tr1_tr1():
			self.__effect_main_region_trolley_departure_arrival_arrival_at_a_station_r1__choice_0_tr1()
		else:
			self.__effect_main_region_trolley_departure_arrival_arrival_at_a_station_r1__choice_0_tr0()
		
	def __react_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1__choice_0(self):
		"""The reactions of state null..
		"""
		if self.__check_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1__choice_0_tr0_tr0():
			self.__effect_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1__choice_0_tr0()
		else:
			self.__effect_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1__choice_0_tr1()
		
	def __react_main_region_trolley_departure_arrival_emergency_stop_r1__choice_0(self):
		"""The reactions of state null..
		"""
		if self.__check_main_region_trolley_departure_arrival_emergency_stop_r1__choice_0_tr0_tr0():
			self.__effect_main_region_trolley_departure_arrival_emergency_stop_r1__choice_0_tr0()
		else:
			self.__effect_main_region_trolley_departure_arrival_emergency_stop_r1__choice_0_tr1()
		
	def __react_main_region_trolley_boarding_manager_doors_open_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_trolley_boarding_manager_doors_open_r1_boarding_possible_default()
		
	def __react_main_region_trolley_boarding_manager__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_trolley_boarding_manager_doors_closed_default()
		
	def __react_main_region_trolley_departure_arrival_arrival_at_a_station_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_just_arrived_default()
		
	def __react_main_region_trolley_departure_arrival_departure_to_a_station_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_default()
		
	def __react_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free_default()
		
	def __react_main_region_trolley_departure_arrival__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_default()
		
	def __react_main_region_trolley_departure_arrival_emergency_stop_r1__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_emergency_started_default()
		
	def __react_main_region_trolley_request_handler__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_trolley_request_handler_accepting_requests_default()
		
	def __react_main_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_trolley_default()
		
	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		return transitioned_before
	
	
	def __main_region_trolley_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_react function.
		"""
		transitioned_after = transitioned_before
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_boarding_manager_doors_closed_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_boarding_manager_doors_closed_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.open_doors_in:
				self.__exit_sequence_main_region_trolley_boarding_manager_doors_closed()
				self.__enter_sequence_main_region_trolley_boarding_manager_doors_open_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_trolley_boarding_manager_doors_open_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_boarding_manager_doors_open_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.close_doors:
				self.__exit_sequence_main_region_trolley_boarding_manager_doors_open()
				self.__enter_sequence_main_region_trolley_boarding_manager_doors_closed_default()
				transitioned_after = 0
		return transitioned_after
	
	
	def __main_region_trolley_boarding_manager_doors_open_r1_boarding_possible_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_boarding_manager_doors_open_r1_boarding_possible_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if (self.board) and (self.remaining_capacity > 0 and self.__is_door_available):
				self.__exit_sequence_main_region_trolley_boarding_manager_doors_open_r1_boarding_possible()
				self.remaining_capacity = self.remaining_capacity - 1
				self.num_passengers = self.num_passengers + 1
				self.__enter_sequence_main_region_trolley_boarding_manager_doors_open_r1_doors_obstructed_default()
				self.__main_region_trolley_boarding_manager_doors_open_react(0)
				transitioned_after = 0
			elif (self.unboard) and (self.num_passengers > 0 and self.__is_door_available):
				self.__exit_sequence_main_region_trolley_boarding_manager_doors_open_r1_boarding_possible()
				self.remaining_capacity = self.remaining_capacity + 1
				self.num_passengers = self.num_passengers - 1
				self.__enter_sequence_main_region_trolley_boarding_manager_doors_open_r1_doors_obstructed_default()
				self.__main_region_trolley_boarding_manager_doors_open_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_boarding_manager_doors_open_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_boarding_manager_doors_open_r1_doors_obstructed_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_boarding_manager_doors_open_r1_doors_obstructed_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.__time_events[0]:
				self.__exit_sequence_main_region_trolley_boarding_manager_doors_open_r1_doors_obstructed()
				self.__enter_sequence_main_region_trolley_boarding_manager_doors_open_r1_boarding_possible_default()
				self.__main_region_trolley_boarding_manager_doors_open_react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_boarding_manager_doors_open_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_arrival_at_a_station_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_arrival_at_a_station_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.start_emergency:
				self.__exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station()
				self.__enter_sequence_main_region_trolley_departure_arrival_emergency_stop_default()
				transitioned_after = 1
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_arrival_at_a_station_r1_just_arrived_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_arrival_at_a_station_r1_just_arrived_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.__time_events[1]:
				self.__exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_just_arrived()
				self.__enter_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_default()
				self.__main_region_trolley_departure_arrival_arrival_at_a_station_react(1)
				transitioned_after = 1
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_departure_arrival_arrival_at_a_station_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.__time_events[2]:
				self.__exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open()
				self.__react_main_region_trolley_departure_arrival_arrival_at_a_station_r1__choice_0()
				transitioned_after = 1
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_departure_arrival_arrival_at_a_station_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_awaiting_request_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_awaiting_request_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if (self.stop_added) and (((self.stops_at & ~((1 << self.__current_station)))) != 0):
				self.__exit_sequence_main_region_trolley_departure_arrival_arrival_at_a_station()
				self.__enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_default()
				transitioned_after = 1
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_departure_arrival_arrival_at_a_station_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_departure_to_a_station_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_departure_to_a_station_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.start_emergency:
				self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station()
				self.__enter_sequence_main_region_trolley_departure_arrival_emergency_stop_default()
				transitioned_after = 1
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_react function.
		"""
		transitioned_after = transitioned_before
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_departure_arrival_departure_to_a_station_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.__time_events[3]:
				self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free()
				self.__react_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1__choice_0()
				transitioned_after = 1
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_obstructed_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_obstructed_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.door_free:
				self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_obstructed()
				self.__enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free_default()
				self.__main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_react(1)
				transitioned_after = 1
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_departure_to_a_station_r1_doors_closed_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_departure_to_a_station_r1_doors_closed_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.__time_events[4]:
				self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_doors_closed()
				self.__enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_start_departure_default()
				self.__main_region_trolley_departure_arrival_departure_to_a_station_react(1)
				transitioned_after = 1
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_departure_arrival_departure_to_a_station_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_departure_to_a_station_r1_respond_to_approaching_station_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_departure_to_a_station_r1_respond_to_approaching_station_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if (self.approaching_station) and (((self.stops_at & ((1 << self.approaching_station_value)))) != 0):
				self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_respond_to_approaching_station()
				self.__current_station = self.approaching_station_value
				self.__enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_break_until_standstill_default()
				self.__main_region_trolley_departure_arrival_departure_to_a_station_react(1)
				transitioned_after = 1
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_departure_arrival_departure_to_a_station_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_departure_to_a_station_r1_break_until_standstill_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_departure_to_a_station_r1_break_until_standstill_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.at_target_speed:
				self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station()
				self.__enter_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_default()
				transitioned_after = 1
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_departure_arrival_departure_to_a_station_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_departure_to_a_station_r1_start_departure_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_departure_to_a_station_r1_start_departure_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.at_target_speed:
				self.__exit_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_start_departure()
				self.__enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_r1_respond_to_approaching_station_default()
				self.__main_region_trolley_departure_arrival_departure_to_a_station_react(1)
				transitioned_after = 1
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_departure_arrival_departure_to_a_station_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_emergency_stop_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_emergency_stop_react function.
		"""
		transitioned_after = transitioned_before
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_emergency_stop_r1_emergency_started_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_emergency_stop_r1_emergency_started_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.__time_events[5]:
				self.__exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_emergency_started()
				self.__react_main_region_trolley_departure_arrival_emergency_stop_r1__choice_0()
				transitioned_after = 1
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_departure_arrival_emergency_stop_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_emergency_stop_r1_break_until_standstill_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_emergency_stop_r1_break_until_standstill_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.at_target_speed:
				self.__exit_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_break_until_standstill()
				self.__enter_sequence_main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_default()
				self.__main_region_trolley_departure_arrival_emergency_stop_react(1)
				transitioned_after = 1
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_departure_arrival_emergency_stop_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.stop_emergency:
				self.__exit_sequence_main_region_trolley_departure_arrival_emergency_stop()
				self.__enter_sequence_main_region_trolley_departure_arrival_departure_to_a_station_default()
				transitioned_after = 1
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_departure_arrival_emergency_stop_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_arrival_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_arrival_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if self.stop_emergency:
				self.__exit_sequence_main_region_trolley_departure_arrival_emergency_stop()
				self.__enter_sequence_main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_default()
				transitioned_after = 1
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_departure_arrival_emergency_stop_react(transitioned_before)
		return transitioned_after
	
	
	def __main_region_trolley_request_handler_accepting_requests_react(self, transitioned_before):
		"""Implementation of __main_region_trolley_request_handler_accepting_requests_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 2:
			if self.request_stop:
				self.__exit_sequence_main_region_trolley_request_handler_accepting_requests()
				self.stops_at = self.stops_at | ((1 << self.request_stop_value))
				self.raise_stop_added()
				self.refresh_ui_observable.next()
				self.__enter_sequence_main_region_trolley_request_handler_accepting_requests_default()
				self.__main_region_trolley_react(0)
				transitioned_after = 2
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_trolley_react(transitioned_before)
		return transitioned_after
	
	
	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.approaching_station = False
		self.board = False
		self.unboard = False
		self.request_stop = False
		self.at_target_speed = False
		self.start_emergency = False
		self.stop_emergency = False
		self.__time_events[0] = False
		self.__time_events[1] = False
		self.__time_events[2] = False
		self.__time_events[3] = False
		self.__time_events[4] = False
		self.__time_events[5] = False
	
	
	def __clear_internal_events(self):
		"""Implementation of __clear_internal_events function.
		"""
		self.door_free = False
		self.door_obstructed = False
		self.stop_added = False
		self.open_doors_in = False
		self.close_doors_in = False
	
	
	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		transitioned = -1
		self.__state_conf_vector_position = 0
		state = self.__state_vector[0]
		if state == self.State.main_region_trolley_boarding_manager_doors_closed:
			transitioned = self.__main_region_trolley_boarding_manager_doors_closed_react(transitioned)
		elif state == self.State.main_region_trolley_boarding_manager_doors_open_r1boarding_possible:
			transitioned = self.__main_region_trolley_boarding_manager_doors_open_r1_boarding_possible_react(transitioned)
		elif state == self.State.main_region_trolley_boarding_manager_doors_open_r1doors_obstructed:
			transitioned = self.__main_region_trolley_boarding_manager_doors_open_r1_doors_obstructed_react(transitioned)
		if self.__state_conf_vector_position < 1:
			state = self.__state_vector[1]
			if state == self.State.main_region_trolley_departure_arrival_arrival_at_a_station_r1just_arrived:
				transitioned = self.__main_region_trolley_departure_arrival_arrival_at_a_station_r1_just_arrived_react(transitioned)
			elif state == self.State.main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open:
				transitioned = self.__main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_react(transitioned)
			elif state == self.State.main_region_trolley_departure_arrival_arrival_at_a_station_r1doors_open_awaiting_request:
				transitioned = self.__main_region_trolley_departure_arrival_arrival_at_a_station_r1_doors_open_awaiting_request_react(transitioned)
			elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_free:
				transitioned = self.__main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_free_react(transitioned)
			elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1closing_doors_r1doors_obstructed:
				transitioned = self.__main_region_trolley_departure_arrival_departure_to_a_station_r1_closing_doors_r1_doors_obstructed_react(transitioned)
			elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1doors_closed:
				transitioned = self.__main_region_trolley_departure_arrival_departure_to_a_station_r1_doors_closed_react(transitioned)
			elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1respond_to_approaching_station:
				transitioned = self.__main_region_trolley_departure_arrival_departure_to_a_station_r1_respond_to_approaching_station_react(transitioned)
			elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1break_until_standstill:
				transitioned = self.__main_region_trolley_departure_arrival_departure_to_a_station_r1_break_until_standstill_react(transitioned)
			elif state == self.State.main_region_trolley_departure_arrival_departure_to_a_station_r1start_departure:
				transitioned = self.__main_region_trolley_departure_arrival_departure_to_a_station_r1_start_departure_react(transitioned)
			elif state == self.State.main_region_trolley_departure_arrival_emergency_stop_r1emergency_started:
				transitioned = self.__main_region_trolley_departure_arrival_emergency_stop_r1_emergency_started_react(transitioned)
			elif state == self.State.main_region_trolley_departure_arrival_emergency_stop_r1break_until_standstill:
				transitioned = self.__main_region_trolley_departure_arrival_emergency_stop_r1_break_until_standstill_react(transitioned)
			elif state == self.State.main_region_trolley_departure_arrival_emergency_stop_r1doors_open:
				transitioned = self.__main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_react(transitioned)
			elif state == self.State.main_region_trolley_departure_arrival_emergency_stop_r1doors_open_arrival:
				transitioned = self.__main_region_trolley_departure_arrival_emergency_stop_r1_doors_open_arrival_react(transitioned)
		if self.__state_conf_vector_position < 2:
			state = self.__state_vector[2]
			if state == self.State.main_region_trolley_request_handler_accepting_requests:
				transitioned = self.__main_region_trolley_request_handler_accepting_requests_react(transitioned)
	
	
	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.__is_executing:
			return
		self.__is_executing = True
		next_event = self.__get_next_event()
		if next_event is not None:
			self.__execute_queued_event(next_event)
		condition_0 = True
		while condition_0:
			self.__micro_step()
			self.__clear_in_events()
			self.__clear_internal_events()
			next_event = self.__get_next_event()
			if next_event is not None:
				self.__execute_queued_event(next_event)
			condition_0 = self.approaching_station or self.board or self.unboard or self.request_stop or self.at_target_speed or self.start_emergency or self.stop_emergency or self.door_free or self.door_obstructed or self.stop_added or self.open_doors_in or self.close_doors_in or self.__time_events[0] or self.__time_events[1] or self.__time_events[2] or self.__time_events[3] or self.__time_events[4] or self.__time_events[5]
		self.__is_executing = False
	
	
	def enter(self):
		"""Implementation of enter function.
		"""
		if self.timer_service is None:
			raise ValueError('Timer service must be set.')
		
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__enter_sequence_main_region_default()
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		"""
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__exit_sequence_main_region()
		self.__is_executing = False
	
	
	
